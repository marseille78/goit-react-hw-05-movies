{"version":3,"file":"static/js/990.c6bbf13a.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/cast/cast.module.css?44e2","components/cast/cast.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js","services/api-service.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"box\":\"cast_box__l-Euw\",\"item\":\"cast_item__DWdfp\",\"name\":\"cast_name__81-1N\"};","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { apiService } from '../../services/api-service';\n\nimport Loader from '../loader';\n\nimport css from './cast.module.css';\n\nconst Cast = () => {\n\n  const [searchParams] = useSearchParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const movieId = searchParams.get('id');\n\n  useEffect(() => {\n    setIsLoading(true);\n    apiService.getMovieCredits(movieId)\n      .then(res => {\n        setCast(res);\n      })\n      .catch(err => {\n        setError(err);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\n  const listActors = cast.map(({ profile_path, character, name }) => (\n    <li key={ name } className={ css.item }>\n      <img src={ profile_path } alt={ name } />\n      <p className={ css.name }>{ name } <span>({ character })</span></p>\n    </li>\n  ));\n\n  const loader = isLoading && <Loader />\n  const content = error\n    ? <h2>{ error.message }</h2>\n    : (\n      <ul className={ css.box }>\n        { listActors }\n      </ul>\n    );\n\n  return (\n    <>\n      { loader }\n      { content }\n    </>\n  );\n};\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default function _classPrivateFieldBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n\n  return receiver;\n}","var id = 0;\nexport default function _classPrivateFieldKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}","const BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY_API = '221af12348c3ca060963c8b12f5995d3';\n\n\nconst formatDate = (dateString) => {\n  const months = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  const date = new Date(dateString);\n\n  return `${months[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n};\n\nclass ApiService {\n  getResource = async (url) => {\n    const res = await fetch(`${BASE_URL}${url}api_key=${KEY_API}`);\n    return res.json();\n  }\n\n  getTrending = async (page=1) => {\n    const res = await this.getResource(`/trending/movie/day?page=${page}&`);\n    return this.#transformTrending(res);\n  }\n\n  #transformTrending({ results, total_results }) {\n    const transformedResults = results.map(({ id, title, poster_path, vote_average }) => ({\n      movieId: id,\n      title,\n      poster_path: poster_path ? 'https://image.tmdb.org/t/p/w500' + poster_path : '/goit-react-hw-05-movies/img/noimage.jpg',\n      vote_average: vote_average.toFixed(2),\n    }));\n\n    return {\n      results: transformedResults,\n      total_results\n    };\n  }\n\n  searchMovies = async (query, page=1) => {\n    const res = await this.getResource(`/search/movie?query=${query}&page=${page}&`);\n    return this.#transformTrending(res);\n  };\n\n  getMovieDetails = async (movieId) => {\n    const res = await this.getResource(`/movie/${movieId}?`);\n    return this.#transformMovieDetails(res);\n  };\n\n  #transformMovieDetails({\n    genres,\n    overview,\n    poster_path,\n    production_companies,\n    production_countries,\n    release_date,\n    title,\n    vote_average\n  }) {\n    return {\n      genres: genres.map(({name}) => name),\n      overview,\n      poster_path: poster_path ? 'https://image.tmdb.org/t/p/w500' + poster_path : 'goit-react-hw-05-movies/img/noimage.jpg',\n      production_companies: production_companies.map(({name}) => name),\n      production_countries: production_countries.map(({name}) => name),\n      release_date: formatDate(release_date),\n      title,\n      vote_average: vote_average.toFixed(2),\n    };\n  }\n\n  getMovieCredits = async (movieId) => {\n    const res = await this.getResource(`/movie/${movieId}/credits?`);\n    return this.#transformCredits(res);\n  }\n\n  #transformCredits({ cast }) {\n    return cast.map(({ character, name, profile_path, id }) => ({\n      id,\n      character,\n      name,\n      profile_path: profile_path\n        ? 'https://image.tmdb.org/t/p/w500' + profile_path\n        : '/goit-react-hw-05-movies/img/noimage.jpg',\n    }));\n  }\n\n  getMovieReviews = async (movieId, page=1) => {\n    const res = await this.getResource(`/movie/${movieId}/reviews?page=${page}&`);\n    return this.#transformMovieReviews(res);\n  }\n\n  #transformMovieReviews({ results }) {\n    return results.map(({ author, author_details: { avatar_path }, content, created_at, updated_at, url, id }) => {\n\n      const avatar = avatar_path\n        ? avatar_path.includes('http')\n          ? avatar_path.slice(1)\n          : 'https://image.tmdb.org/t/p/w500' + avatar_path\n        : '/goit-react-hw-05-movies/img/noimage.jpg';\n\n      return {\n        author,\n        avatar_path: avatar,\n        content,\n        created_at: formatDate(created_at),\n        updated_at: formatDate(updated_at),\n        url,\n        id\n      };\n    });\n  }\n}\n\nexport const apiService = new ApiService();\n"],"names":["useSearchParams","searchParams","useState","cast","setCast","isLoading","setIsLoading","error","setError","movieId","get","useEffect","apiService","then","res","catch","err","finally","listActors","map","profile_path","character","name","className","css","src","alt","loader","content","message","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","undefined","_classPrivateFieldBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldKey","formatDate","dateString","date","Date","getMonth","getDate","getFullYear","ApiService","getResource","url","fetch","json","getTrending","page","searchMovies","query","getMovieDetails","getMovieCredits","getMovieReviews","results","total_results","transformedResults","title","poster_path","vote_average","toFixed","genres","overview","production_companies","production_countries","release_date","author","avatar_path","author_details","created_at","updated_at","includes","slice"],"sourceRoot":""}